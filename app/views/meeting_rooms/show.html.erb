<div id = "common-container">
  <div id = "timer-container">
    <%= render "shared/timer" %>
  </div>
  <div id = "Modal">
  </div>
  <div id = "meeting-room-sidebar">
    <% if @meeting_room.finish_at > DateTime.now %>
      <!-- マイクミュートブロック -->
      <div class = "room-sidebar-content" id = "audio-no-mute">
        <i class="fas fa-microphone"></i>
        <div class = "room-sidebar-detail">マイクミュート</div>
      </div>
      
      <div class = "room-sidebar-content" id = "audio-mute" style = "display: none;">
        <i class="fas fa-microphone-slash"></i>
        <div class = "room-sidebar-detail">マイクミュート解除</div>
      </div>

      <!-- ビデオミュートブロック -->
      <div class = "room-sidebar-content" id = "video-no-mute">
        <i class="fas fa-video"></i>
        <div class = "room-sidebar-detail">ビデオミュート</div>
      </div>

      <div class = "room-sidebar-content" id = "video-mute" style = "display: none;">
        <i class="fas fa-video-slash"></i>
        <div class = "room-sidebar-detail">ビデオミュート解除</div>
      </div>
    <% end %>
    <!-- エントリーユーザーブロック -->
    <div class = "room-sidebar-content toggle-btn" id = "room-users">
      <i class="fas fa-users"></i>
      <div class = "room-sidebar-detail">エントリーユーザー</div>
    </div>
    <% if @meeting_room.finish_at > DateTime.now %>
      <!-- ユーザー招待ブロック -->
      <div class = "room-sidebar-content toggle-btn" id = "room-invitation">
        <i class="fas fa-user-plus"></i>
        <div class = "room-sidebar-detail">ユーザー招待</div>
      </div>
    <% end %>
    <!-- チャットブロック -->
    <div class = "room-sidebar-content toggle-btn" id = "room-message">
      <span id = "room-chat-notice" style = "display: none;">●</span>
      <i class="fas fa-comments"></i>
      <div class = "room-sidebar-detail">チャット</div>
    </div>
    <% if @meeting_room.finish_at > DateTime.now %>
      <!-- 外部メッセージブロック -->
      <div class = "room-sidebar-content toggle-btn" id = "outside-send-message-list">
        <i class="fas fa-envelope"></i>
        <div class = "room-sidebar-detail">外部メッセージ</div>
      </div>
      <!-- コンフィグブロック -->
      <div class = "room-sidebar-content toggle-btn" id = "video-config">
        <i class="fas fa-cog"></i>
        <div class = "room-sidebar-detail">設定</div>
      </div>
      <!-- 一時退出ブロック -->
      <%= link_to meeting_room_path(@meeting_room.public_uid), data: {"turbolinks" => false} do %>
        <div class = "room-sidebar-content" id = "room-leave-btn">
          <i class="fas fa-sign-out-alt"></i>
          <div class = "room-sidebar-detail">一時退出</div>
        </div>
      <% end %>
    <% end %>
  </div>
  <div id = "room-users-container" class = "room-users">
    <h6>ユーザーリスト</h6>
    <ul id = "room-users-list">
      <li>
        <span class = "user-name"><%= current_user.name %></span>
        <span class = "user-status" id = "user-status-<%= current_user.public_uid %>"><i class="fas fa-circle"></i></span>
      </li>
      <% @room_users.each do |user| %>
        <% if user != current_user %>
          <li>
            <span class = "user-name"><%= user.name %></span>
            <span class = "user-status" id = "user-status-<%= user.public_uid %>"><i class="fas fa-circle"></i></span>
            <span class = "user-microphone" id = "user-microphone-<%= user.public_uid %>"><i class="fas fa-microphone"></i></span>
          </li>
        <% end %>
      <% end %>
    </ul>
  </div>
  <div id = "room-invitation-container" class = "room-invitation">
    <h6>参加ユーザー追加</h6>
    <ul id = "invitation-users-list">
      <% @users.each do |user| %>
        <% if !@room_users.include?(user) %>
          <li id = "invitation-user-<%= user.public_uid %>">
            <span class = "user-name"><%= user.name %></span>
            <div class = "user-entry-form">
              <%= form_with(model: Entry.new, remote: true) do |f| %>
                <%= f.hidden_field :user_id, value: user.public_uid, id: "entry_user_id_#{user.public_uid}" %>
                <%= f.hidden_field :meeting_room_id, value: @meeting_room.public_uid, id: "entry_meeting_room_id_#{user.public_uid}" %>
                <%= f.submit "追加" %>
              <% end %>
            </div>
          </li>
        <% end %>
      <% end %>
    </ul>
  </div>
  <div id = "room-message-container" class = "room-message" style = "display: none;">
    <h6>チャット</h6>
    <div id = "messages" data-message_id = "<%= current_user.public_uid %>">
      <% if @room_messages.present? %>
        <% @room_messages.each do |message| %>
          <% if message.user == current_user %>
            <div class = "message-content current">
              <span class = message-name><%= message.user.name %></span>
              <div class = "message"><%= safe_join(message.content.split("\n"), tag(:br)) %></div>
              <span class = "message-data"><%= l message.created_at %></span>
            </div>
          <% else %>
            <div class = "message-content other">
              <span class = message-name><%= message.user.name %></span>
              <div class = "message"><%= safe_join(message.content.split("\n"), tag(:br)) %></div>
              <span class = "message-data"><%= l message.created_at %></span>
            </div>
          <% end %>
        <% end %>
      <% end %>
    </div>
    <div id = "message-form">
      <%= form_with(model: @new_message, remote: true) do |f| %>
        <%= f.hidden_field :meeting_room_id, value: @meeting_room.public_uid %>
        <%= f.text_area :content, id: "room-message-textarea" %>
        <%= f.submit "送信", class: "message-btn" %>
      <% end %>
    </div>
  </div>
  <div id = "outside-send-message-container" class = "outside-send-message-list">
    <h6>外部メッセージ送信</h6>
    <div id = "general-message-user-list">
      <% @departments.each do |department| %>
        <div class = "group-container">
          <div class = "group-head">
            <%= department.name %>
          </div>
          <ul class = "group-list">
            <% department.users.each do |user| %>
              <% if user != current_user %>
                <li class = "select-user select-user-<%= user.public_uid %>" data-select_user = "<%= user.public_uid %>"><%= user.name %></li>
              <% end %>
            <% end %>
          </ul>
        </div>
      <% end %>
      <% @contact_groups.each do |group| %>
        <div class = "group-container">
          <div class = "group-head">
            <%= group.name %>
          </div>
          <ul class = "group-list">
            <% group.users.each do |user| %>
              <li class = "select-user select-user-<%= user.public_uid %>" data-select_user = "<%= user.public_uid %>"><%= user.name %></li>
            <% end %>
          </ul>
        </div>
      <% end %>
    </div>
    <div id = "outside-send-message-form">
      <%= form_with(model: @new_general_message, url: general_messages_multiple_create_path) do |f| %>
        <div id = "chat-send-users-form-list">
            
        </div>
        <%= f.text_area :content, id: "general-message-textarea" %>
        <%= f.submit "送信", class: "message-btn" %>
      <% end %>
    </div>
  </div>
  <div 
    id = "video-config-container" 
    class = "video-config" 
    <% if @meeting_room.finish_at > DateTime.now %>
      data-room_status = "on"
    <% else %>
      data-room_status = "off"
    <% end %>
  >
    <h6>映像・マイク変更</h6>
    <div id = device-config-form></div>
  </div>
  <% if @meeting_room.finish_at > DateTime.now %>
    <div id = "meeting-room" data-room_id = "<%= @meeting_room.public_uid %>">
      <%= render "meeting_rooms/room_setting" %>
    </div>
  <% else %>
    <div id = "meeting-room" data-room_id = "<%= @meeting_room.public_uid %>">
      <div id = "inactive-room">
        <i class="fas fa-door-open" id = "door"></i>
        <i class="far fa-times-circle" id = "door-invalid"></i>
        <span>ミーティングは終了しています。</span>
      </div>
    </div>
  <% end %>
</div>

<% if @meeting_room.finish_at > DateTime.now %>
  <script>
    var modal = document.getElementById("Modal");
    const Peer = window.Peer;
    (async function room_setting(){
      const myVideo = document.getElementById("my-video");
      const video_select = document.getElementById("video-select");
      const audio_select = document.getElementById("audio-select");
      const device_select = document.getElementsByClassName("device-select");

      // デバイス取得
      let optionStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
      });

      const devices = await navigator.mediaDevices.enumerateDevices();
      
      //　デバイス選択追加
      for(var i=0; i < devices.length;i++){
        if(devices[i].kind == "videoinput"){
          let option = document.createElement("option");
          option.setAttribute("value", devices[i].deviceId);
          option.innerHTML = devices[i].label;
          video_select.appendChild(option);
        } else if(devices[i].kind == "audioinput"){
          let option = document.createElement("option");
          option.setAttribute("value", devices[i].deviceId);
          option.innerHTML = devices[i].label;
          audio_select.appendChild(option);
        }
      }

      const changeDevice = (e) => {
        if(video_select.value != "" && audio_select.value != "" && video_select.value != "display"){
          let Stream = navigator.mediaDevices.getUserMedia({
            audio: {deviceId: audio_select.value},
            video: {deviceId: video_select.value}
          }).then((stream)=> {
            myVideo.muted = true;
            myVideo.srcObject = stream;
            myVideo.playsInline = true;
            myVideo.play().catch(console.error);
          });
        } else if(video_select.value == "display" && audio_select.value != ""){
          let Stream = navigator.mediaDevices.getDisplayMedia({
            audio: {deviceId: audio_select.value},
            video: true
          }).then((stream)=> {
            myVideo.muted = true;
            myVideo.srcObject = stream;
            myVideo.playsInline = true;
            myVideo.play().catch(console.error);
          });
        }
      }       
      
      // ビデオデバイス切替
      for(var i=0; i < device_select.length; i++){
        device_select[i].addEventListener("change", changeDevice);
      }

      // Peerインスタンス作成 
      const peer = (window.peer = new Peer({
        key: "<%= ENV["API_KEY"] %>",
        debug: 3
      }));
    })();
  </script>
<% end %>